import PhFOperations, {
  PhAggregate,
  PhAggregate_None,
  PhAggregate_Count,
  PhAggregate_Sum,
  PhAggregate_Avg,
  PhAggregate_Min,
  PhAggregate_Max,
  PhAggregate_StdDev,
  PhAggregate_Var,
  PhAggregate_Median,
  PhFOper_EQ,
  PhFOper_NE,
  PhFOper_ST,
  PhFOper_ED,
  PhFOper_CT,
  PhFOper_NST,
  PhFOper_NED,
  PhFOper_NCT,
  PhFOper_GT,
  PhFOper_GE,
  PhFOper_LT,
  PhFOper_LE,
  PhFOper_BT,
  PhFOper_NB,
  PhFC_Number,
  PhFC_Autocomplete,
  PhFC_DatePicker,
  PhFC_Select,
  PhFC_CheckBox,
} from "../../../../operation";

import BaseUrl from "../../../../contants";

let meta = {
  isFilter: true,
  isAggregate: false,
  isDisplayOPtion: false,
  isPrintOption: false,
  isGroupBy: false,
  Generals: {
    title: "Deduction Types",
  },
  URLS: {
    New: { URl: "", Method: "POST" },
    Update: { URl: "", Method: "PUT" },
    Delete: { URl: "", Method: "DELETE" },
    Search: { URl: `${BaseUrl}UC/Emp/Deduction/Query`, Method: "POST" },
    Get: { URl: "", Method: "GET" },
  },
  Fields: [
    {
      label: "dedName",
      element: "fldDedName",
      rElement: "fldDedname",
      field: "dedId",
      rField: "dedName",
      type: "text",
      isForm: true,
      isQuery: true,
      hasSecondField: false,
      isShown: true,
      Query: {
        isRequired: false,
        isAutocomplete: true,
        dataType: PhFC_Autocomplete,
        divClass: "col-sm-4 px-0",
        labelClass:
          "col-sm-1 form-label ph-label text-start text-sm-end text-start text-sm-end",
        inputClass: "form-control form-control-sm phAutocomplete",
        Operation: "1",
        autocomplete: {
          data_label: "",
          data_acrel: "",
          data_acoperation: "/UC/Emp/Deduction/Autocomplete",
          data_params: "",
        },
        value1: "",
        value2: "",
        defValue: "",
        aOperations: [PhFOper_EQ],
        defOperationValue: PhFOper_EQ,
        tableWidth: "10",
      },
    },
    {
      label: "Amount.Type",
      element: "fldAmttypeId",
      rElement: "fldAmttypeName",
      field: "amttypeId",
      rField: "amttypeName",
      type: "select",
      isQuery: true,
      hasSecondField: false,
      isShown: true,
      Query: {
        isRequired: false,
        isAutocomplete: false,
        dataType: PhFC_Select,
        labelClass:
          "col-sm-1 form-label ph-label text-start text-sm-end text-start text-sm-end",
        inputClass: "form-select form-select-sm",
        Operation: "2",
        options: "AmtType",
        value1: "",
        value2: "",
        defValue: "",
        aOperations: [PhFOper_EQ, PhFOper_NE],
        defOperationValue: [PhFOper_EQ],
        tableWidth: "10",
      },
    },
    {
      label: "dedAmt",
      element: "fldDedAmt",
      second_element: "fldDedAmt-second",
      rElement: "fldDedAmtName",
      field: "dedAmt",
      rField: "dedAmtName",
      type: "text",
      isForm: false,
      isQuery: true,
      hasSecondField: true,
      isShown: true,
      Query: {
        isRequired: false,
        isAutocomplete: false,
        dataType: PhFC_Number,
        divClass: "col-sm-2 px-0",
        labelClass:
          "col-sm-1 form-label ph-label text-start text-sm-end text-start text-sm-end",
        inputClass: "form-control form-control-sm",
        Operation: "3", //must be unique
        value1: "",
        value2: "",
        defValue: "",
        aOperations: [
          PhFOper_EQ,
          PhFOper_NE,
          PhFOper_GT,
          PhFOper_GE,
          PhFOper_LT,
          PhFOper_LE,
          PhFOper_BT,
          PhFOper_NB,
        ],
        defOperationValue: PhFOper_CT,
        tableWidth: "15",
      },
    },
  ],
};

export { meta };
